// Code generated by mockery v2.9.4. DO NOT EDIT.

package lister

import (
	context "context"

	topo "github.com/pingcap/tidb-dashboard/util/topo"
	mock "github.com/stretchr/testify/mock"
)

// MockComponentLister is an autogenerated mock type for the ComponentLister type
type MockComponentLister struct {
	mock.Mock
}

// BatchVerify provides a mock function with given fields: sdList
func (_m *MockComponentLister) BatchVerify(sdList []SignedComponentDescriptor) ([]topo.ComponentDescriptor, error) {
	ret := _m.Called(sdList)

	var r0 []topo.ComponentDescriptor
	if rf, ok := ret.Get(0).(func([]SignedComponentDescriptor) []topo.ComponentDescriptor); ok {
		r0 = rf(sdList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]topo.ComponentDescriptor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]SignedComponentDescriptor) error); ok {
		r1 = rf(sdList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: _a0
func (_m *MockComponentLister) List(_a0 context.Context) ([]SignedComponentDescriptor, error) {
	ret := _m.Called(_a0)

	var r0 []SignedComponentDescriptor
	if rf, ok := ret.Get(0).(func(context.Context) []SignedComponentDescriptor); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]SignedComponentDescriptor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: sd
func (_m *MockComponentLister) Verify(sd SignedComponentDescriptor) (topo.ComponentDescriptor, error) {
	ret := _m.Called(sd)

	var r0 topo.ComponentDescriptor
	if rf, ok := ret.Get(0).(func(SignedComponentDescriptor) topo.ComponentDescriptor); ok {
		r0 = rf(sd)
	} else {
		r0 = ret.Get(0).(topo.ComponentDescriptor)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(SignedComponentDescriptor) error); ok {
		r1 = rf(sd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
