// Code generated by mockery v2.9.4. DO NOT EDIT.

package view

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// MockModel is an autogenerated mock type for the Model type
type MockModel struct {
	mock.Mock
}

// AuthFn provides a mock function with given fields: _a0
func (_m *MockModel) AuthFn(_a0 ...Operation) []gin.HandlerFunc {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []gin.HandlerFunc
	if rf, ok := ret.Get(0).(func(...Operation) []gin.HandlerFunc); ok {
		r0 = rf(_a0...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gin.HandlerFunc)
		}
	}

	return r0
}

// GetBundle provides a mock function with given fields: _a0
func (_m *MockModel) GetBundle(_a0 GetBundleReq) (GetBundleResp, error) {
	ret := _m.Called(_a0)

	var r0 GetBundleResp
	if rf, ok := ret.Get(0).(func(GetBundleReq) GetBundleResp); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(GetBundleResp)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(GetBundleReq) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBundleData provides a mock function with given fields: _a0
func (_m *MockModel) GetBundleData(_a0 GetBundleDataReq) (GetBundleDataResp, error) {
	ret := _m.Called(_a0)

	var r0 GetBundleDataResp
	if rf, ok := ret.Get(0).(func(GetBundleDataReq) GetBundleDataResp); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(GetBundleDataResp)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(GetBundleDataReq) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileData provides a mock function with given fields: _a0
func (_m *MockModel) GetProfileData(_a0 GetProfileDataReq) (GetProfileDataResp, error) {
	ret := _m.Called(_a0)

	var r0 GetProfileDataResp
	if rf, ok := ret.Get(0).(func(GetProfileDataReq) GetProfileDataResp); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(GetProfileDataResp)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(GetProfileDataReq) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBundles provides a mock function with given fields:
func (_m *MockModel) ListBundles() (ListBundlesResp, error) {
	ret := _m.Called()

	var r0 ListBundlesResp
	if rf, ok := ret.Get(0).(func() ListBundlesResp); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ListBundlesResp)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTargets provides a mock function with given fields:
func (_m *MockModel) ListTargets() (ListTargetsResp, error) {
	ret := _m.Called()

	var r0 ListTargetsResp
	if rf, ok := ret.Get(0).(func() ListTargetsResp); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ListTargetsResp)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartBundle provides a mock function with given fields: _a0
func (_m *MockModel) StartBundle(_a0 StartBundleReq) (StartBundleResp, error) {
	ret := _m.Called(_a0)

	var r0 StartBundleResp
	if rf, ok := ret.Get(0).(func(StartBundleReq) StartBundleResp); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(StartBundleResp)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(StartBundleReq) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
